#/usr/bin/python3
# aes_sbox.py code for sboxes for aes

S_IN  = '0x000x010x020x030x040x050x060x070x080x090x0A0x0B0x0C0x0D0x0E0x0F'\
        '0x100x110x120x130x140x150x160x170x180x190x1A0x1B0x1C0x1D0x1E0x1F'\
        '0x200x210x220x230x240x250x260x270x280x290x2A0x2B0x2C0x2D0x2E0x2F'\
        '0x300x310x320x330x340x350x360x370x380x390x3A0x3B0x3C0x3D0x3E0x3F'\
        '0x400x410x420x430x440x450x460x470x480x490x4A0x4B0x4C0x4D0x4E0x4F'\
        '0x500x510x520x530x540x550x560x570x580x590x5A0x5B0x5C0x5D0x5E0x5F'\
        '0x600x610x620x630x640x650x660x670x680x690x6A0x6B0x6C0x6D0x6E0x6F'\
        '0x700x710x720x730x740x750x760x770x780x790x7A0x7B0x7C0x7D0x7E0x7F'\
        '0x800x810x820x830x840x850x860x870x880x890x8A0x8B0x8C0x8D0x8E0x8F'\
        '0x900x910x920x930x940x950x960x970x980x990x9A0x9B0x9C0x9D0x9E0x9F'\
        '0xA00xA10xA20xA30xA40xA50xA60xA70xA80xA90xAA0xAB0xAC0xAD0xAE0xAF'\
        '0xB00xB10xB20xB30xB40xB50xB60xB70xB80xB90xBA0xBB0xBC0xBD0xBE0xBF'\
        '0xC00xC10xC20xC30xC40xC50xC60xC70xC80xC90xCA0xCB0xCC0xCD0xCE0xCF'\
        '0xD00xD10xD20xD30xD40xD50xD60xD70xD80xD90xDA0xDB0xDC0xDD0xDE0xDF'\
        '0xE00xE10xE20xE30xE40xE50xE60xE70xE80xE90xEA0xEB0xEC0xED0xEE0xEF'\
        '0xF00xF10xF20xF30xF40xF50xF60xF70xF80xF90xFA0xFB0xFC0xFD0xFE0xFF'

S_OUT = '0x630x7C0x770x7B0xF20x6B0x6F0xC50x300x010x670x2B0xFE0xD70xAB0x76'\
        '0xCA0x820xC90x7D0xFA0x590x470xF00xAD0xD40xA20xAF0x9C0xA40x720xC0'\
        '0xB70xFD0x930x260x360x3F0xF70xCC0x340xA50xE50xF10x710xD80x310x15'\
        '0x040xC70x230xC30x180x960x050x9A0x070x120x800xE20xEB0x270xB20x75'\
        '0x090x830x2C0x1A0x1B0x6E0x5A0xA00x520x3B0xD60xB30x290xE30x2F0x84'\
        '0x530xD10x000xED0x200xFC0xB10x5B0x6A0xCB0xBE0x390x4A0x4C0x580xCF'\
        '0xD00xEF0xAA0xFB0x430x4D0x330x850x450xF90x020x7F0x500x3C0x9F0xA8'\
        '0x510xA30x400x8F0x920x9D0x380xF50xBC0xB60xDA0x210x100xFF0xF30xD2'\
        '0xCD0x0C0x130xEC0x5F0x970x440x170xC40xA70x7E0x3D0x640x5D0x190x73'\
        '0x600x810x4F0xDC0x220x2A0x900x880x460xEE0xB80x140xDE0x5E0x0B0xDB'\
        '0xE00x320x3A0x0A0x490x060x240x5C0xC20xD30xAC0x620x910x950xE40x79'\
        '0xE70xC80x370x6D0x8D0xD50x4E0xA90x6C0x560xF40xEA0x650x7A0xAE0x08'\
        '0xBA0x780x250x2E0x1C0xA60xB40xC60xE80xDD0x740x1F0x4B0xBD0x8B0x8A'\
        '0x700x3E0xB50x660x480x030xF60x0E0x610x350x570xB90x860xC10x1D0x9E'\
        '0xE10xF80x980x110x690xD90x8E0x940x9B0x1E0x870xE90xCE0x550x280xDF'\
        '0x8C0xA10x890x0D0xBF0xE60x420x680x410x990x2D0x0F0xB00x540xBB0x16'

# take a series of hex bytes and return the sbox substitution for them.
# format for input bytes is 2 chars, lower or uppercase
# optional argument allows for reversal with decryption
def sub(data, encrypt = True):
    src = S_IN
    dst = S_OUT
    if encrypt == False:
        src = S_OUT
        dst = S_IN
    retval = ''
    # make sure encoding for byte is correct
    for i in range(int(len(data)/2)):
        tmpByte = '0x' + data[i*2:(i*2)+2].upper()
        index = src.find(tmpByte)
        retval = retval + dst[index + 2:index+len(tmpByte)]
    return retval

def main():
    for i in range(int(len(S_IN) / 4)):
        print('%c%c\t%c%c' % (S_IN[(4*i)+2], S_IN[(4*i)+3], \
                              S_OUT[(4*i)+2], S_OUT[(4*i)+3]))   

if __name__=='__main__':
    main()
